Analyze the following project requirements for a social platform application and determine the most suitable type of database. Use Chain-of-Thought (CoT) reasoning to justify your decision step-by-step, ensuring each requirement is addressed logically.

Project Requirements:
Scale: Millions of users (high growth expected).

Data Types:

User profiles (structured, e.g., name, bio).

Posts (semi-structured, e.g., text, images, metadata).

Connections (graph-like, e.g., followers/following).

Read/Write Ratio: 80% reads, 20% writes.

Performance Needs:

High read speed (low latency for fetching posts/profiles).

Scalability to handle increasing user base/data volume.

CoT Reasoning Steps:
Identify Data Model Needs:

Should the database handle structured, semi-structured, or graph data most efficiently?

Are relationships (connections) between users a critical query pattern?

Evaluate Read vs. Write Demands:

How does the 80% read requirement influence the choice?

Are caching or indexing features important?

Assess Scalability:

Which databases scale horizontally (e.g., sharding) to accommodate millions of users?

Does the database support distributed architectures?

Compare Database Types:

Relational (SQL): Strong consistency, but does it handle graph queries efficiently?

Document (NoSQL): Flexible for profiles/posts, but how well does it manage connections?

Graph Database: Optimal for connections, but how does it perform for high-speed reads/scaling?

Hybrid Approach: Would a combination (e.g., document + graph) be justified?

Final Recommendation:

Select the best database type (or combination) and justify how it meets all requirements.

Provide a clear, step-by-step rationale, concluding with a specific database recommendation (e.g., PostgreSQL, MongoDB, Neo4j, Cassandra, etc.).